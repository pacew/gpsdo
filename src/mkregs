#! /usr/bin/env python3

import sys
import re
import copy

import xml.etree.ElementTree as ET

from pprint import PrettyPrinter
def pprint(val):
    PrettyPrinter().pprint(val)


def do_interrupt(device, peripheral, node):
    intr = dict()
    for child in node:
        intr[child.tag] = child.text
    device['interrupts'].append(intr)

def do_field(device, peripheral, register, node):
    field = dict()
    for child in node:
        field[child.tag] = child.text
    register['fields'].append(field)

def do_register(device, peripheral, node):
    register = dict()
    register['fields'] = list()
    for child in node:
        if child.tag == 'fields':
            for f in child:
                if f.tag == "field":
                    do_field(device, peripheral, register, f)
        else:
            register[child.tag] = child.text
    peripheral['registers'].append(register)

def do_peripheral(device, node):
    peripheral = dict()
    
    d = node.attrib.get('derivedFrom')
    if d:
        peripheral['derivedFrom'] = d

    peripheral['registers'] = list()

    for child in node:
        if child.tag == 'addressBlock':
            pass
        elif child.tag == 'interrupt':
            do_interrupt(device, peripheral, child)
        elif child.tag == 'registers':
            for r in child:
                if r.tag == "register":
                    do_register(device, peripheral, r)
        else:
            peripheral[child.tag] = child.text

    pname = peripheral['name']
    device['peripherals'][pname] = peripheral

def get_peripheral(device, pname):
    for _, peripheral in device['peripherals'].items():
        if pname == pget(peripheral, 'name'):
            return peripheral
    return None

def read_svd(filename):
    tree = ET.parse (filename)

    device = dict()
    device['peripherals'] = dict()
    device['interrupts'] = list()

    for child in tree.getroot():
        if child.tag == "peripherals":
            for node in child:
                do_peripheral(device, node)
        else:
            device[child.tag] = child.text

    for _, peripheral in device['peripherals'].items():
        derived_from = peripheral.get('derivedFrom')
        if derived_from:
            base = device['peripherals'][derived_from]
            peripheral['description'] = base['description']
            peripheral['registers'] = copy.deepcopy (base['registers'])

    return device

def fixspace(s):
    if s is None:
        return ""
    return re.sub(r'[ \t\n][ \t\n]*', ' ', s).strip()

def pget(peripheral, key):
    val = peripheral.get(key)
    if not val:
        val = ""
    if type(val) == str:
        val = fixspace(val)
    return val

exceptions = [ 
    "intr_initial_sp",    # 00
    "intr_reset",         # 04
    "intr_nmi",           # 08
    "intr_hard_fault",    # 0c
    "intr_mmu_fault",     # 10
    "intr_bus_fault",     # 14
    "intr_usage_fault",   # 18
    "intr_resv_1c",       # 1c
    "intr_resv_20",       # 20
    "intr_resv_24",       # 24
    "intr_resv_28",       # 28
    "intr_svcall",        # 2c
    "intr_resv_30",       # 30
    "intr_resv_34",       # 34
    "intr_resv_pendsv",   # 38
    "intr_resv_systick",  # 3c
]

def write_interrupts(device):
    out = list()
    out.append('\t/* generated by gen-bits */')
    out.append('\t.global vector_table')
    out.append('\t.section .vector_table, "a", %progbits')
    out.append('\t.type vector_table, %object')
    out.append('')
    
    out.append(f"vector_table:")
    inum = -16
    addr = 0
    for ex in exceptions:
        if addr == 0:
            op = f".word _estack"
        elif addr == 4:
            op = f".word start"
        else:
            op = f".word {ex}"
        out.append(f"\t{op:30s} /* {inum:3d} 0x{addr:04x} */ ")
        inum += 1
        addr += 4

    tbl = dict()
    max_inum = 0
    for intr in device['interrupts']:
        inum = int(intr['value'])
        if inum > max_inum:
            max_inum = inum
        tbl[inum] = intr

    inum = 0
    while inum <= max_inum:
        intr = tbl.get(inum)
        if intr is None:
            name = "intr_unhandled"
            desc = ""
        else:
            name = ("intr_"+intr['name']).lower()
            desc = fixspace(intr['description'])

        op = f".word {name}"
        out.append(f"\t{op:30s} /* {inum:3d} 0x{addr:04x} {desc} */")

        inum += 1
        addr += 4

    out.append("")

    addr = 0
    for ex in exceptions:
        if addr > 4:
            out.append(f"\t.weak {ex}")
            out.append(f"\t.thumb_set {ex},intr_unhandled")
            out.append("")
        addr += 4
        
    inum = 0
    while inum <= max_inum:
        intr = tbl.get(inum)
        if intr is not None:
            name = ("intr_"+intr['name']).lower()
            out.append(f"\t.weak {name}")
            out.append(f"\t.thumb_set {name}, intr_unhandled")
            out.append("")
        inum += 1

    out.append("\t.size vector_table, .-vector_table")

    with open("vectors.S", "w") as outf:
        for line in out:
            print(line, file=outf)

regs_by_pname_rname = dict()
fields_by_pname_rname_fname = dict()
fields_by_pshort_rname_fname = dict()

def make_all_regs(device):
    for _, peripheral in device['peripherals'].items():
        for register in pget(peripheral, 'registers'):
            pname = peripheral['name']
            rname = register['name']
            pname_rname = f"{pname}_{rname}"

            pshort = pname[:-1]
            pshort_rname = f"{pshort}_{rname}"

            register['pname_rname'] = pname_rname
            regs_by_pname_rname[pname_rname] = register

            for field in pget(register, 'fields'):
                fname = field['name']
                pname_rname_fname = f"{pname}_{rname}_{fname}"
                pshort_rname_fname = f"{pshort}_{rname}_{fname}"
                
                field['pname_rname_fname'] = pname_rname_fname
                fields_by_pname_rname_fname[pname_rname_fname] = field

                field['pshort_rname_fname'] = pshort_rname_fname
                fields_by_pshort_rname_fname[pshort_rname_fname] = field

def scan_source_file(fname):
    with open(fname) as inf:
        for line in inf:
            for tok in re.findall(r'[A-Z][_A-Za-z0-9]*', line):
                reg = regs_by_pname_rname.get(tok)
                if reg:
                    reg['want'] = True

                field = fields_by_pname_rname_fname.get(tok)
                if field:
                    field['want'] = True

                field = fields_by_pshort_rname_fname.get(tok)
                if field:
                    field['want_short'] = True


def mkfield(field, outname):
    bit_offset = int(field['bitOffset'])
    bit_width = int(field['bitWidth'])

    mask = ((1<<bit_width) - 1) << bit_offset
    valstr = f"0x{mask:x}"

    return f"#define {outname} {valstr}"

def write_regs(device, want_all):
    out = list()
    out.append ("/* generated by mkregs.h */")
    for _, peripheral in device['peripherals'].items():
        base = int(pget(peripheral, 'baseAddress'), 16)

        for register in pget(peripheral, 'registers'):
            if want_all or register.get('want'):
                offset = int(register['addressOffset'], 16)
                addr = base + offset
                out.append(f"#define {register['pname_rname']}"
                           f" (*(unsigned int volatile *)0x{addr:x})")

    out.append("")

    for _, peripheral in device['peripherals'].items():
        for register in pget(peripheral, 'registers'):
            for field in register['fields']:
                if want_all or field.get('want'):
                    out.append(mkfield (field, field['pname_rname_fname']))
                if want_all or field.get('want_short'):
                    out.append(mkfield (field, field['pshort_rname_fname']))

    with open("regs.h", "w") as outf:
        outf.write("\n".join(out)+"\n")


def mkregs():
    if len(sys.argv) < 2:
        print("usage: mkregs FILE.svd [cfiles...]")
        sys.exit(1)

    svd_file = sys.argv[1]

    device = read_svd(svd_file)
    make_all_regs (device)

    if len(sys.argv) == 2:
        want_all = True
    else:
        want_all = False
        for fname in sys.argv[2:]:
            scan_source_file(fname)

    write_regs(device, want_all)
    write_interrupts(device)


mkregs()
